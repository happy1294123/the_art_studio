// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course {
  id           Int            @id @default(autoincrement())
  name         String
  type         String?
  date         String
  start_time   String
  end_time     String
  teacher      User           @relation(fields: [teacher_id], references: [id])
  teacher_id   Int
  total_rez    Int            @db.UnsignedSmallInt
  baseline_rez Int            @default(2)
  point        Int            @default(10)
  price        Int            @default(250)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  Reservation  Reservation[]
  CancelLog    CancelLog[]
  Payment      Payment[]
  UserDiscount UserDiscount[]

  @@index([teacher_id])
  @@map("courses")
}

model CourseType {
  id    Int    @id @default(autoincrement())
  name  String
  color String

  @@map("course_type")
}

model Reservation {
  course     Course           @relation(fields: [course_id], references: [id])
  course_id  Int
  user       User             @relation(fields: [user_id], references: [id])
  user_id    Int
  plan_name  String
  plan_value Int
  state      ReservationState @default(SUCCESS)
  category   Category         @default(POINT)
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt

  @@unique([course_id, user_id])
  @@index([user_id])
  @@map("reservations")
}

enum ReservationState {
  SUCCESS
  PENDING
  CANCEL
}

enum Category {
  POINT
  SINGLE
}

model User {
  id               Int            @id @default(autoincrement())
  serial_number    String?
  name             String
  email            String
  password         String
  image            String?
  role             Role           @default(STUDENT)
  point            Int            @default(0)
  point_deadline   DateTime?
  schedule_service String?        @default("")
  email_varified   Boolean        @default(false)
  gender           Gender         @default(UNKNOW)
  birth            String?
  phone            String?
  medical          String?
  em_name          String?
  em_relation      String?
  em_phone         String?
  address          String?
  note             String?
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  Course           Course[]
  Reservation      Reservation[]
  UserDiscount     UserDiscount[]
  CancelLog        CancelLog[]
  Payment          Payment[]

  @@unique([email])
  @@map("users")
}

enum Role {
  ADMIN
  EDITOR
  TEACHER
  STUDENT
}

enum Gender {
  MALE
  FEMALE
  UNKNOW
}

model Discount {
  id             Int            @id @default(autoincrement())
  code           String
  description    String
  point_discount String?
  price_discount String?
  active         Boolean        @default(true)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  UserDiscount   UserDiscount[]

  @@map("discounts")
}

model UserDiscount {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [user_id], references: [id])
  user_id     Int
  discount    Discount @relation(fields: [discount_id], references: [id])
  discount_id Int
  course      Course   @relation(fields: [course_id], references: [id])
  course_id   Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([user_id])
  @@index([discount_id])
  @@index([course_id])
  @@map("user_discounts")
}

model CancelLog {
  id          Int      @id @default(autoincrement())
  course      Course   @relation(fields: [course_id], references: [id])
  course_id   Int
  user        User     @relation(fields: [user_id], references: [id])
  user_id     Int
  stateTo     String
  returnPoint Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([course_id])
  @@index([user_id])
  @@map("cancel_log")
}

model Payment {
  id              Int          @id @default(autoincrement())
  user            User         @relation(fields: [user_id], references: [id])
  user_id         Int
  name            String
  price           Int
  course          Course?      @relation(fields: [course_id], references: [id])
  course_id       Int?
  description     String?
  receive_date    String?
  receive_price   Int?
  receive_account String?
  receive_note    String?
  state           PaymentState @default(PENDING)
  category        Category     @default(POINT)
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  @@index([course_id])
  @@index([user_id])
  @@map("payment")
}

enum PaymentState {
  SUCCESS
  PENDING
  CHECKING
  CANCEL
  ERROR
}
